ring r = 0, (Z, A, B, m0, m1, m2, m3, m4, m5, m6, m7, n78, n79, n71, n69, n70, n76, n74, n72, n73, n75, n58, n56, n57, n41, n38, n39, n54, n52, n53, n67, n65, n61, n59, n60, n44, n42, n43, n28, n25, n26, n37, n35, n36, n51, n49, n50, n64, n62, n47, n45, n46, n31, n29, n30, n21, n18, n19, n24, n22, n23, n34, n32, n33, n48, n63, n66, a0, a1, a2, a3, b0, b1, b2, b3), lp;

poly fZ = -Z + 1*m0 + 2*m1 + 4*m2 + 8*m3 + 16*m4 + 32*m5 + 64*m6 + 128*m7;
poly fA = -A + 1*a0 + 2*a1 + 4*a2 + 8*a3;
poly fB = -B + 1*b0 + 2*b1 + 4*b2 + 8*b3;
// AND2X1
poly f0 = -m0 + b0*a0;
// XOR2X1
poly f1 = -m1 + n19 + n18 - 2*n19*n18;
// XOR2X1
poly f2 = -m2 + n26 + n25 - 2*n26*n25;
// XOR2X1
poly f3 = -m3 + n39 + n38 - 2*n39*n38;
// XOR2X1
poly f4 = -m4 + n54 + n41 - 2*n54*n41;
// XOR2X1
poly f5 = -m5 + n67 + n58 - 2*n67*n58;
// XOR2X1
poly f6 = -m6 + n76 + n71 - 2*n76*n71;
// OR2X1
poly f7 = -m7 + n79 + n78 - n79*n78;
// AND2X1
poly f8 = -n78 + n75*n74;
// AND2X1
poly f9 = -n79 + n76*n71;
// OR2X1
poly f10 = -n71 + n70 + n69 - n70*n69;
// AND2X1
poly f11 = -n69 + n66*n65;
// AND2X1
poly f12 = -n70 + n67*n58;
// XOR2X1
poly f13 = -n76 + n75 + n74 - 2*n75*n74;
// OR2X1
poly f14 = -n74 + n73 + n72 - n73*n72;
// AND2X1
poly f15 = -n72 + n63*n62;
// AND2X1
poly f16 = -n73 + n64*n61;
// AND2X1
poly f17 = -n75 + b3*a3;
// OR2X1
poly f18 = -n58 + n57 + n56 - n57*n56;
// AND2X1
poly f19 = -n56 + n53*n52;
// AND2X1
poly f20 = -n57 + n54*n41;
// AND2X1
poly f21 = -n41 + n39*n38;
// XOR2X1
poly f22 = -n38 + n37 + n28 - 2*n37*n28;
// AND2X1
poly f23 = -n39 + b3*a0;
// XOR2X1
poly f24 = -n54 + n53 + n52 - 2*n53*n52;
// XOR2X1
poly f25 = -n52 + n51 + n44 - 2*n51*n44;
// AND2X1
poly f26 = -n53 + b3*a1;
// XOR2X1
poly f27 = -n67 + n66 + n65 - 2*n66*n65;
// XOR2X1
poly f28 = -n65 + n64 + n61 - 2*n64*n61;
// OR2X1
poly f29 = -n61 + n60 + n59 - n60*n59;
// AND2X1
poly f30 = -n59 + n50*n49;
// AND2X1
poly f31 = -n60 + n51*n44;
// OR2X1
poly f32 = -n44 + n43 + n42 - n43*n42;
// AND2X1
poly f33 = -n42 + n36*n35;
// AND2X1
poly f34 = -n43 + n37*n28;
// AND2X1
poly f35 = -n28 + n26*n25;
// XOR2X1
poly f36 = -n25 + n24 + n21 - 2*n24*n21;
// AND2X1
poly f37 = -n26 + b2*a0;
// XOR2X1
poly f38 = -n37 + n36 + n35 - 2*n36*n35;
// XOR2X1
poly f39 = -n35 + n34 + n31 - 2*n34*n31;
// AND2X1
poly f40 = -n36 + b2*a1;
// XOR2X1
poly f41 = -n51 + n50 + n49 - 2*n50*n49;
// XOR2X1
poly f42 = -n49 + n48 + n47 - 2*n48*n47;
// AND2X1
poly f43 = -n50 + b2*a2;
// XOR2X1
poly f44 = -n64 + n63 + n62 - 2*n63*n62;
// AND2X1
poly f45 = -n62 + n48*n47;
// OR2X1
poly f46 = -n47 + n46 + n45 - n46*n45;
// AND2X1
poly f47 = -n45 + n33*n32;
// AND2X1
poly f48 = -n46 + n34*n31;
// OR2X1
poly f49 = -n31 + n30 + n29 - n30*n29;
// AND2X1
poly f50 = -n29 + n23*n22;
// AND2X1
poly f51 = -n30 + n24*n21;
// AND2X1
poly f52 = -n21 + n19*n18;
// AND2X1
poly f53 = -n18 + b0*a1;
// AND2X1
poly f54 = -n19 + b1*a0;
// XOR2X1
poly f55 = -n24 + n23 + n22 - 2*n23*n22;
// AND2X1
poly f56 = -n22 + b0*a2;
// AND2X1
poly f57 = -n23 + b1*a1;
// XOR2X1
poly f58 = -n34 + n33 + n32 - 2*n33*n32;
// AND2X1
poly f59 = -n32 + b0*a3;
// AND2X1
poly f60 = -n33 + b1*a2;
// AND2X1
poly f61 = -n48 + b1*a3;
// AND2X1
poly f62 = -n63 + b2*a3;
// AND2X1
poly f63 = -n66 + b3*a2;
// INPUT
poly fa0 = a0^2 - a0;
// INPUT
poly fa1 = a1^2 - a1;
// INPUT
poly fa2 = a2^2 - a2;
// INPUT
poly fa3 = a3^2 - a3;
// INPUT
poly fb0 = b0^2 - b0;
// INPUT
poly fb1 = b1^2 - b1;
// INPUT
poly fb2 = b2^2 - b2;
// INPUT
poly fb3 = b3^2 - b3;
ideal J = (fZ, fA, fB, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63);
ideal J0 = (n74^2 - n74, n67^2 - n67, n76^2 - n76, n70^2 - n70, n71^2 - n71, n58^2 - n58, n59^2 - n59, n56^2 - n56, n57^2 - n57, n18^2 - n18, n19^2 - n19, n52^2 - n52, n53^2 - n53, n50^2 - n50, n51^2 - n51, n38^2 - n38, n39^2 - n39, n79^2 - n79, b1^2 - b1, b2^2 - b2, b3^2 - b3, n30^2 - n30, n31^2 - n31, n32^2 - n32, n33^2 - n33, n34^2 - n34, n35^2 - n35, n36^2 - n36, n37^2 - n37, n72^2 - n72, n73^2 - n73, n75^2 - n75, m5^2 - m5, m4^2 - m4, m7^2 - m7, m6^2 - m6, m1^2 - m1, m0^2 - m0, m3^2 - m3, m2^2 - m2, n54^2 - n54, n49^2 - n49, n48^2 - n48, n65^2 - n65, n64^2 - n64, n63^2 - n63, n62^2 - n62, n61^2 - n61, n60^2 - n60, n41^2 - n41, n78^2 - n78, n43^2 - n43, n42^2 - n42, n45^2 - n45, n44^2 - n44, n47^2 - n47, n46^2 - n46, a1^2 - a1, a0^2 - a0, n29^2 - n29, n28^2 - n28, n69^2 - n69, n23^2 - n23, n22^2 - n22, n21^2 - n21, n26^2 - n26, n25^2 - n25, n24^2 - n24, a3^2 - a3, n66^2 - n66, a2^2 - a2, b0^2 - b0);
poly f_spec =Z-A*B;
reduce(f_spec, J + J0);
