ring r = 0, (Z, A, B, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, n128, n129, n121, n119, n120, n126, n124, n122, n123, n125, n106, n104, n105, n87, n85, n86, n102, n100, n101, n117, n115, n109, n107, n108, n90, n88, n89, n99, n97, n98, n114, n112, n110, n111, n93, n91, n92, n96, n94, n95, n113, n116, n64, n61, n62, n83, n81, n67, n65, n66, n45, n42, n43, n60, n58, n59, n80, n78, n70, n68, n69, n48, n46, n47, n32, n29, n30, n41, n39, n40, n57, n55, n56, n77, n75, n73, n71, n72, n51, n49, n50, n35, n33, n34, n25, n22, n23, n28, n26, n27, n38, n36, n37, n54, n52, n53, n74, n76, n79, n82, a0, a1, a2, a3, a4, b0, b1, b2, b3, b4), lp;

poly fZ = -Z + 1*m0 + 2*m1 + 4*m2 + 8*m3 + 16*m4 + 32*m5 + 64*m6 + 128*m7 + 256*m8 + 512*m9;
poly fA = -A + 1*a0 + 2*a1 + 4*a2 + 8*a3 + 16*a4;
poly fB = -B + 1*b0 + 2*b1 + 4*b2 + 8*b3 + 16*b4;
// AND2X1
poly f0 = -m0 + b0*a0;
// XOR2X1
poly f1 = -m1 + n23 + n22 - 2*n23*n22;
// XOR2X1
poly f2 = -m2 + n30 + n29 - 2*n30*n29;
// XOR2X1
poly f3 = -m3 + n43 + n42 - 2*n43*n42;
// XOR2X1
poly f4 = -m4 + n62 + n61 - 2*n62*n61;
// XOR2X1
poly f5 = -m5 + n83 + n64 - 2*n83*n64;
// XOR2X1
poly f6 = -m6 + n102 + n87 - 2*n102*n87;
// XOR2X1
poly f7 = -m7 + n117 + n106 - 2*n117*n106;
// XOR2X1
poly f8 = -m8 + n126 + n121 - 2*n126*n121;
// OR2X1
poly f9 = -m9 + n129 + n128 - n129*n128;
// AND2X1
poly f10 = -n128 + n125*n124;
// AND2X1
poly f11 = -n129 + n126*n121;
// OR2X1
poly f12 = -n121 + n120 + n119 - n120*n119;
// AND2X1
poly f13 = -n119 + n116*n115;
// AND2X1
poly f14 = -n120 + n117*n106;
// XOR2X1
poly f15 = -n126 + n125 + n124 - 2*n125*n124;
// OR2X1
poly f16 = -n124 + n123 + n122 - n123*n122;
// AND2X1
poly f17 = -n122 + n113*n112;
// AND2X1
poly f18 = -n123 + n114*n109;
// AND2X1
poly f19 = -n125 + b4*a4;
// OR2X1
poly f20 = -n106 + n105 + n104 - n105*n104;
// AND2X1
poly f21 = -n104 + n101*n100;
// AND2X1
poly f22 = -n105 + n102*n87;
// OR2X1
poly f23 = -n87 + n86 + n85 - n86*n85;
// AND2X1
poly f24 = -n85 + n82*n81;
// AND2X1
poly f25 = -n86 + n83*n64;
// XOR2X1
poly f26 = -n102 + n101 + n100 - 2*n101*n100;
// XOR2X1
poly f27 = -n100 + n99 + n90 - 2*n99*n90;
// AND2X1
poly f28 = -n101 + b4*a2;
// XOR2X1
poly f29 = -n117 + n116 + n115 - 2*n116*n115;
// XOR2X1
poly f30 = -n115 + n114 + n109 - 2*n114*n109;
// OR2X1
poly f31 = -n109 + n108 + n107 - n108*n107;
// AND2X1
poly f32 = -n107 + n98*n97;
// AND2X1
poly f33 = -n108 + n99*n90;
// OR2X1
poly f34 = -n90 + n89 + n88 - n89*n88;
// AND2X1
poly f35 = -n88 + n79*n78;
// AND2X1
poly f36 = -n89 + n80*n67;
// XOR2X1
poly f37 = -n99 + n98 + n97 - 2*n98*n97;
// XOR2X1
poly f38 = -n97 + n96 + n93 - 2*n96*n93;
// AND2X1
poly f39 = -n98 + b3*a3;
// XOR2X1
poly f40 = -n114 + n113 + n112 - 2*n113*n112;
// OR2X1
poly f41 = -n112 + n111 + n110 - n111*n110;
// AND2X1
poly f42 = -n110 + n95*n94;
// AND2X1
poly f43 = -n111 + n96*n93;
// OR2X1
poly f44 = -n93 + n92 + n91 - n92*n91;
// AND2X1
poly f45 = -n91 + n76*n75;
// AND2X1
poly f46 = -n92 + n77*n70;
// XOR2X1
poly f47 = -n96 + n95 + n94 - 2*n95*n94;
// AND2X1
poly f48 = -n94 + n74*n73;
// AND2X1
poly f49 = -n95 + b2*a4;
// AND2X1
poly f50 = -n113 + b3*a4;
// AND2X1
poly f51 = -n116 + b4*a3;
// AND2X1
poly f52 = -n64 + n62*n61;
// XOR2X1
poly f53 = -n61 + n60 + n45 - 2*n60*n45;
// AND2X1
poly f54 = -n62 + b4*a0;
// XOR2X1
poly f55 = -n83 + n82 + n81 - 2*n82*n81;
// XOR2X1
poly f56 = -n81 + n80 + n67 - 2*n80*n67;
// OR2X1
poly f57 = -n67 + n66 + n65 - n66*n65;
// AND2X1
poly f58 = -n65 + n59*n58;
// AND2X1
poly f59 = -n66 + n60*n45;
// AND2X1
poly f60 = -n45 + n43*n42;
// XOR2X1
poly f61 = -n42 + n41 + n32 - 2*n41*n32;
// AND2X1
poly f62 = -n43 + b3*a0;
// XOR2X1
poly f63 = -n60 + n59 + n58 - 2*n59*n58;
// XOR2X1
poly f64 = -n58 + n57 + n48 - 2*n57*n48;
// AND2X1
poly f65 = -n59 + b3*a1;
// XOR2X1
poly f66 = -n80 + n79 + n78 - 2*n79*n78;
// XOR2X1
poly f67 = -n78 + n77 + n70 - 2*n77*n70;
// OR2X1
poly f68 = -n70 + n69 + n68 - n69*n68;
// AND2X1
poly f69 = -n68 + n56*n55;
// AND2X1
poly f70 = -n69 + n57*n48;
// OR2X1
poly f71 = -n48 + n47 + n46 - n47*n46;
// AND2X1
poly f72 = -n46 + n40*n39;
// AND2X1
poly f73 = -n47 + n41*n32;
// AND2X1
poly f74 = -n32 + n30*n29;
// XOR2X1
poly f75 = -n29 + n28 + n25 - 2*n28*n25;
// AND2X1
poly f76 = -n30 + b2*a0;
// XOR2X1
poly f77 = -n41 + n40 + n39 - 2*n40*n39;
// XOR2X1
poly f78 = -n39 + n38 + n35 - 2*n38*n35;
// AND2X1
poly f79 = -n40 + b2*a1;
// XOR2X1
poly f80 = -n57 + n56 + n55 - 2*n56*n55;
// XOR2X1
poly f81 = -n55 + n54 + n51 - 2*n54*n51;
// AND2X1
poly f82 = -n56 + b2*a2;
// XOR2X1
poly f83 = -n77 + n76 + n75 - 2*n76*n75;
// XOR2X1
poly f84 = -n75 + n74 + n73 - 2*n74*n73;
// OR2X1
poly f85 = -n73 + n72 + n71 - n72*n71;
// AND2X1
poly f86 = -n71 + n53*n52;
// AND2X1
poly f87 = -n72 + n54*n51;
// OR2X1
poly f88 = -n51 + n50 + n49 - n50*n49;
// AND2X1
poly f89 = -n49 + n37*n36;
// AND2X1
poly f90 = -n50 + n38*n35;
// OR2X1
poly f91 = -n35 + n34 + n33 - n34*n33;
// AND2X1
poly f92 = -n33 + n27*n26;
// AND2X1
poly f93 = -n34 + n28*n25;
// AND2X1
poly f94 = -n25 + n23*n22;
// AND2X1
poly f95 = -n22 + b0*a1;
// AND2X1
poly f96 = -n23 + b1*a0;
// XOR2X1
poly f97 = -n28 + n27 + n26 - 2*n27*n26;
// AND2X1
poly f98 = -n26 + b0*a2;
// AND2X1
poly f99 = -n27 + b1*a1;
// XOR2X1
poly f100 = -n38 + n37 + n36 - 2*n37*n36;
// AND2X1
poly f101 = -n36 + b0*a3;
// AND2X1
poly f102 = -n37 + b1*a2;
// XOR2X1
poly f103 = -n54 + n53 + n52 - 2*n53*n52;
// AND2X1
poly f104 = -n52 + b0*a4;
// AND2X1
poly f105 = -n53 + b1*a3;
// AND2X1
poly f106 = -n74 + b1*a4;
// AND2X1
poly f107 = -n76 + b2*a3;
// AND2X1
poly f108 = -n79 + b3*a2;
// AND2X1
poly f109 = -n82 + b4*a1;
// INPUT
poly fa0 = a0^2 - a0;
// INPUT
poly fa1 = a1^2 - a1;
// INPUT
poly fa2 = a2^2 - a2;
// INPUT
poly fa3 = a3^2 - a3;
// INPUT
poly fa4 = a4^2 - a4;
// INPUT
poly fb0 = b0^2 - b0;
// INPUT
poly fb1 = b1^2 - b1;
// INPUT
poly fb2 = b2^2 - b2;
// INPUT
poly fb3 = b3^2 - b3;
// INPUT
poly fb4 = b4^2 - b4;
ideal J = (fZ, fA, fB, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97, f98, f99, f100, f101, f102, f103, f104, f105, f106, f107, f108, f109);
ideal J0 = (n38^2 - n38, n39^2 - n39, n30^2 - n30, n32^2 - n32, n33^2 - n33, n34^2 - n34, n35^2 - n35, n36^2 - n36, n37^2 - n37, n85^2 - n85, n87^2 - n87, n86^2 - n86, n81^2 - n81, n80^2 - n80, n83^2 - n83, n82^2 - n82, n89^2 - n89, n88^2 - n88, n129^2 - n129, n128^2 - n128, n125^2 - n125, n124^2 - n124, n126^2 - n126, n121^2 - n121, n120^2 - n120, n123^2 - n123, n122^2 - n122, b4^2 - b4, b0^2 - b0, b1^2 - b1, b2^2 - b2, b3^2 - b3, n98^2 - n98, n99^2 - n99, n92^2 - n92, n93^2 - n93, n90^2 - n90, n91^2 - n91, n96^2 - n96, n97^2 - n97, n94^2 - n94, n95^2 - n95, n67^2 - n67, n66^2 - n66, n65^2 - n65, n64^2 - n64, n62^2 - n62, n61^2 - n61, n60^2 - n60, n69^2 - n69, n68^2 - n68, a3^2 - a3, a2^2 - a2, n74^2 - n74, n75^2 - n75, n76^2 - n76, n77^2 - n77, n70^2 - n70, n71^2 - n71, n72^2 - n72, n73^2 - n73, n78^2 - n78, n79^2 - n79, m5^2 - m5, m4^2 - m4, m7^2 - m7, m6^2 - m6, m1^2 - m1, m0^2 - m0, m3^2 - m3, m2^2 - m2, m9^2 - m9, m8^2 - m8, n49^2 - n49, n48^2 - n48, n41^2 - n41, n40^2 - n40, n43^2 - n43, n42^2 - n42, n45^2 - n45, n47^2 - n47, n46^2 - n46, n58^2 - n58, n59^2 - n59, n56^2 - n56, n57^2 - n57, n54^2 - n54, n55^2 - n55, n52^2 - n52, n53^2 - n53, n50^2 - n50, n51^2 - n51, n114^2 - n114, n115^2 - n115, n116^2 - n116, n117^2 - n117, n110^2 - n110, n111^2 - n111, n112^2 - n112, n113^2 - n113, n119^2 - n119, a1^2 - a1, a0^2 - a0, n29^2 - n29, n28^2 - n28, a4^2 - a4, n23^2 - n23, n22^2 - n22, n27^2 - n27, n26^2 - n26, n25^2 - n25, n107^2 - n107, n106^2 - n106, n105^2 - n105, n104^2 - n104, n102^2 - n102, n101^2 - n101, n100^2 - n100, n109^2 - n109, n108^2 - n108);
poly f_spec =Z-A*B;
reduce(f_spec, J + J0);
