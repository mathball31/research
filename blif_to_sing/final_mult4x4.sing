ring r = 0, (Z, A, B, m0, m1, m2, m3, m4, m5, m6, m7, n94, n87, n85, n86, n92, n95, n88, n91, n89, n90, n66, n61, n43, n28, n41, n59, n45, n58, n57, n65, n44, n64, n50, n48, n47, n49, n30, n40, n63, n83, n67, n82, n78, n68, n56, n77, n73, n69, n39, n72, n29, n21, n26, n71, n32, n31, n70, n46, n76, n62, n51, n75, n74, n81, n79, n54, n52, n35, n33, n22, n18, n19, n25, n34, n23, n24, n38, n53, n36, n37, n55, n80, a0, a1, a2, a3, b0, b1, b2, b3), lp;

poly fZ = -Z + 1*m0 + 2*m1 + 4*m2 + 8*m3 + 16*m4 + 32*m5 + 64*m6 + 128*m7;
poly fA = -A + 1*a0 + 2*a1 + 4*a2 + 8*a3;
poly fB = -B + 1*b0 + 2*b1 + 4*b2 + 8*b3;
// AND2X1
poly f0 = -m0 + b0*a0;
// XOR2X1
poly f1 = -m1 + n19 + n18 - 2*n19*n18;
// XOR2X1
poly f2 = -m2 + n26 + n21 - 2*n26*n21;
// XOR2X1
poly f3 = -m3 + n41 + n28 - 2*n41*n28;
// XOR2X1
poly f4 = -m4 + n59 + n43 - 2*n59*n43;
// XOR2X1
poly f5 = -m5 + n83 + n66 - 2*n83*n66;
// XOR2X1
poly f6 = -m6 + n92 + n87 - 2*n92*n87;
// OR2X1
poly f7 = -m7 + n95 + n94 - n95*n94;
// AND2X1
poly f8 = -n94 + n92*n87;
// OR2X1
poly f9 = -n87 + n86 + n85 - n86*n85;
// AND2X1
poly f10 = -n85 + n83*n66;
// AND2X1
poly f11 = -n86 + n82*n67;
// XOR2X1
poly f12 = -n92 + n91 + n88 - 2*n91*n88;
// AND2X1
poly f13 = -n95 + n91*n88;
// AND2X1
poly f14 = -n88 + b3*a3;
// OR2X1
poly f15 = -n91 + n90 + n89 - n90*n89;
// AND2X1
poly f16 = -n89 + n81*n78;
// AND2X1
poly f17 = -n90 + n80*n79;
// OR2X1
poly f18 = -n66 + n65 + n61 - n65*n61;
// AND2X1
poly f19 = -n61 + n59*n43;
// AND2X1
poly f20 = -n43 + n41*n28;
// AND2X1
poly f21 = -n28 + b3*a0;
// XOR2X1
poly f22 = -n41 + n40 + n30 - 2*n40*n30;
// XOR2X1
poly f23 = -n59 + n58 + n45 - 2*n58*n45;
// INVX1
poly f24 = -n45 + 1 - n44;
// XOR2X1
poly f25 = -n58 + n57 + n50 - 2*n57*n50;
// XOR2X1
poly f26 = -n57 + n56 + n51 - 2*n56*n51;
// AND2X1
poly f27 = -n65 + n64*n44;
// AND2X1
poly f28 = -n44 + b3*a1;
// XOR2X1
poly f29 = -n64 + n63 + n50 - 2*n63*n50;
// AND2X1
poly f30 = -n50 + n49*n48;
// OR2X1
poly f31 = -n48 + n47 + n32 - n47*n32;
// XOR2X1
poly f32 = -n47 + n46 + n35 - 2*n46*n35;
// OR2X1
poly f33 = -n49 + n40 + n30 - n40*n30;
// INVX1
poly f34 = -n30 + 1 - n29;
// XOR2X1
poly f35 = -n40 + n39 + n32 - 2*n39*n32;
// XOR2X1
poly f36 = -n63 + n56 + n62 - 2*n56*n62;
// XOR2X1
poly f37 = -n83 + n82 + n67 - 2*n82*n67;
// AND2X1
poly f38 = -n67 + b3*a2;
// XOR2X1
poly f39 = -n82 + n81 + n78 - 2*n81*n78;
// OR2X1
poly f40 = -n78 + n77 + n68 - n77*n68;
// AND2X1
poly f41 = -n68 + n56*n51;
// XOR2X1
poly f42 = -n56 + n55 + n54 - 2*n55*n54;
// AND2X1
poly f43 = -n77 + n76*n73;
// OR2X1
poly f44 = -n73 + n72 + n69 - n72*n69;
// AND2X1
poly f45 = -n69 + n39*n31;
// XOR2X1
poly f46 = -n39 + n38 + n35 - 2*n38*n35;
// AND2X1
poly f47 = -n72 + n71*n29;
// AND2X1
poly f48 = -n29 + n26*n21;
// AND2X1
poly f49 = -n21 + b2*a0;
// XOR2X1
poly f50 = -n26 + n25 + n22 - 2*n25*n22;
// XOR2X1
poly f51 = -n71 + n70 + n32 - 2*n70*n32;
// INVX1
poly f52 = -n32 + 1 - n31;
// AND2X1
poly f53 = -n31 + b2*a1;
// XOR2X1
poly f54 = -n70 + n46 + n35 - 2*n46*n35;
// INVX1
poly f55 = -n46 + 1 - n38;
// XOR2X1
poly f56 = -n76 + n75 + n62 - 2*n75*n62;
// INVX1
poly f57 = -n62 + 1 - n51;
// AND2X1
poly f58 = -n51 + b2*a2;
// XOR2X1
poly f59 = -n75 + n74 + n54 - 2*n74*n54;
// INVX1
poly f60 = -n74 + 1 - n55;
// XOR2X1
poly f61 = -n81 + n80 + n79 - 2*n80*n79;
// AND2X1
poly f62 = -n79 + n55*n54;
// OR2X1
poly f63 = -n54 + n53 + n52 - n53*n52;
// AND2X1
poly f64 = -n52 + n38*n35;
// OR2X1
poly f65 = -n35 + n34 + n33 - n34*n33;
// AND2X1
poly f66 = -n33 + n25*n22;
// AND2X1
poly f67 = -n22 + n19*n18;
// AND2X1
poly f68 = -n18 + b1*a0;
// AND2X1
poly f69 = -n19 + b0*a1;
// XOR2X1
poly f70 = -n25 + n24 + n23 - 2*n24*n23;
// AND2X1
poly f71 = -n34 + n24*n23;
// AND2X1
poly f72 = -n23 + b1*a1;
// AND2X1
poly f73 = -n24 + b0*a2;
// XOR2X1
poly f74 = -n38 + n37 + n36 - 2*n37*n36;
// AND2X1
poly f75 = -n53 + n37*n36;
// AND2X1
poly f76 = -n36 + b1*a2;
// AND2X1
poly f77 = -n37 + b0*a3;
// AND2X1
poly f78 = -n55 + b1*a3;
// AND2X1
poly f79 = -n80 + b2*a3;
// INPUT
poly fa0 = a0^2 - a0;
// INPUT
poly fa1 = a1^2 - a1;
// INPUT
poly fa2 = a2^2 - a2;
// INPUT
poly fa3 = a3^2 - a3;
// INPUT
poly fb0 = b0^2 - b0;
// INPUT
poly fb1 = b1^2 - b1;
// INPUT
poly fb2 = b2^2 - b2;
// INPUT
poly fb3 = b3^2 - b3;
ideal J = (fZ, fA, fB, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79);
ideal J0 = (fa0, fa1, fa2, fa3, fb0, fb1, fb2, fb3);
poly f_spec =Z-A*B;
reduce(f_spec, J + J0);
