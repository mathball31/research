ring r = 0, (Z, A, B, Z0, Z1, Z2, Z3, Z4, Z5, Z6, Z7, n93, n94, n88, n86, n84, n85, n87, n91, n89, n90, n79, n77, n64, n62, n63, n76, n66, n75, n69, n68, n74, n73, n72, n71, n78, n82, n80, n81, n58, n56, n50, n48, n43, n47, n45, n46, n49, n55, n52, n54, n57, n59, n40, n39, n37, n35, n30, n28, n29, n34, n32, n33, n36, n38, n25, n23, n21, n22, n24, n18, n19, n26, a0, a1, a2, a3, b0, b1, b2, b3), lp;

poly fZ = -Z + 1*Z0 + 2*Z1 + 4*Z2 + 8*Z3 + 16*Z4 + 32*Z5 + 64*Z6 + 128*Z7;
poly fA = -A + 1*a0 + 2*a1 + 4*a2 + 8*a3;
poly fB = -B + 1*b0 + 2*b1 + 4*b2 + 8*b3;
// AND
poly f0 = -Z0 + b0*a0;
// XOR
poly f1 = -Z1 + n19 + n18 - 2*n19*n18;
// XOR
poly f2 = -Z2 + n26 + n25 - 2*n26*n25;
// XNOR
poly f3 = -Z3 + 1 - n40 - n39 + 2*n40*n39;
// XNOR
poly f4 = -Z4 + 1 - n59 - n58 + 2*n59*n58;
// XOR
poly f5 = -Z5 + n82 + n79 - 2*n82*n79;
// XOR
poly f6 = -Z6 + n91 + n88 - 2*n91*n88;
// NAND
poly f7 = -Z7 + 1 - n94*n93;
// AND
poly f8 = -n93 + n87*n86;
// AND
poly f9 = -n94 + n91*n88;
// XOR
poly f10 = -n88 + n87 + n86 - 2*n87*n86;
// NAND
poly f11 = -n86 + 1 - n85*n84;
// AND
poly f12 = -n84 + n63*n62;
// AND
poly f13 = -n85 + n76*n64;
// AND
poly f14 = -n87 + b3*a3;
// NAND
poly f15 = -n91 + 1 - n90*n89;
// AND
poly f16 = -n89 + n78*n77;
// AND
poly f17 = -n90 + n82*n79;
// XOR
poly f18 = -n79 + n78 + n77 - 2*n78*n77;
// XOR
poly f19 = -n77 + n76 + n64 - 2*n76*n64;
// XOR
poly f20 = -n64 + n63 + n62 - 2*n63*n62;
// AND
poly f21 = -n62 + n47*n43;
// AND
poly f22 = -n63 + b2*a3;
// NOTA NAND B
poly f23 = -n76 + 1 - (1 - n75)*n66;
// NOTA NAND B
poly f24 = -n66 + 1 - (1 - n48)*n49;
// AND
poly f25 = -n75 + n74*n69;
// XOR
poly f26 = -n69 + n49 + n68 - 2*n49*n68;
// XOR
poly f27 = -n68 + n47 + n43 - 2*n47*n43;
// NOTA NAND B
poly f28 = -n74 + 1 - (1 - n73)*n52;
// AND
poly f29 = -n73 + n38*n72;
// XOR
poly f30 = -n72 + n36 + n71 - 2*n36*n71;
// XOR
poly f31 = -n71 + n34 + n30 - 2*n34*n30;
// AND
poly f32 = -n78 + b3*a2;
// NAND
poly f33 = -n82 + 1 - n81*n80;
// AND
poly f34 = -n80 + n57*n56;
// NOTA AND B
poly f35 = -n81 + (1 - n59)*n58;
// XOR
poly f36 = -n58 + n57 + n56 - 2*n57*n56;
// XOR
poly f37 = -n56 + n55 + n50 - 2*n55*n50;
// XOR
poly f38 = -n50 + n49 + n48 - 2*n49*n48;
// XNOR
poly f39 = -n48 + 1 - n47 - n43 + 2*n47*n43;
// AND
poly f40 = -n43 + b1*a3;
// NAND
poly f41 = -n47 + 1 - n46*n45;
// AND
poly f42 = -n45 + n29*n28;
// AND
poly f43 = -n46 + n34*n30;
// AND
poly f44 = -n49 + b2*a2;
// AND
poly f45 = -n55 + n54*n52;
// NOTA NAND B
poly f46 = -n52 + 1 - (1 - n35)*n36;
// NOTA NAND B
poly f47 = -n54 + 1 - (1 - n37)*n38;
// AND
poly f48 = -n57 + b3*a1;
// NOTA NAND B
poly f49 = -n59 + 1 - (1 - n39)*n40;
// AND
poly f50 = -n40 + b3*a0;
// XOR
poly f51 = -n39 + n38 + n37 - 2*n38*n37;
// XOR
poly f52 = -n37 + n36 + n35 - 2*n36*n35;
// XNOR
poly f53 = -n35 + 1 - n34 - n30 + 2*n34*n30;
// XOR
poly f54 = -n30 + n29 + n28 - 2*n29*n28;
// AND
poly f55 = -n28 + b0*a3;
// AND
poly f56 = -n29 + b1*a2;
// NAND
poly f57 = -n34 + 1 - n33*n32;
// AND
poly f58 = -n32 + n22*n21;
// AND
poly f59 = -n33 + n24*n23;
// AND
poly f60 = -n36 + b2*a1;
// AND
poly f61 = -n38 + n26*n25;
// XOR
poly f62 = -n25 + n24 + n23 - 2*n24*n23;
// XOR
poly f63 = -n23 + n22 + n21 - 2*n22*n21;
// AND
poly f64 = -n21 + b0*a2;
// AND
poly f65 = -n22 + b1*a1;
// AND
poly f66 = -n24 + n19*n18;
// AND
poly f67 = -n18 + b0*a1;
// AND
poly f68 = -n19 + b1*a0;
// AND
poly f69 = -n26 + b2*a0;
// INPUT
poly f70 = a0^2 - a0;
// INPUT
poly f71 = a1^2 - a1;
// INPUT
poly f72 = a2^2 - a2;
// INPUT
poly f73 = a3^2 - a3;
// INPUT
poly f74 = b0^2 - b0;
// INPUT
poly f75 = b1^2 - b1;
// INPUT
poly f76 = b2^2 - b2;
// INPUT
poly f77 = b3^2 - b3;
ideal J = (fZ, fA, fB, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47, f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77);
poly f_spec = -Z + A*B;
reduce(f_spec, J);
